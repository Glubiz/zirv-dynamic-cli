name: CD Pipeline

permissions:
  contents: write

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  workflow_dispatch: {}

jobs:
  build:
    name: Build Binaries
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build CLI Program
        run: cargo build --release

      - name: Rename and Package Binary for Release
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv target/release/zirv.exe zirv-${{ matrix.os }}.exe;
          else
            mv target/release/zirv zirv-${{ matrix.os }};
            chmod +x zirv-${{ matrix.os }};
            tar -czvf zirv-${{ matrix.os }}.tar.gz zirv-${{ matrix.os }};
          fi

      - name: Upload Artifact for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: zirv-${{ matrix.os }}
          path: zirv-${{ matrix.os }}.exe

      - name: Upload Artifact for Non-Windows
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: zirv-${{ matrix.os }}
          path: zirv-${{ matrix.os }}.tar.gz

  release:
    name: Create and Upload Release Assets and Update Homebrew
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history and tags

      - name: Get version from Cargo.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n 1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        id: create_tag
        shell: bash
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          echo "Creating tag $TAG"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Fetch Tags
        run: git fetch --tags

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-windows-latest
          path: artifacts

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-ubuntu-latest
          path: artifacts

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-macos-latest
          path: artifacts

      - name: Create GitHub Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: "Release of zirv binaries for Windows, Linux, and macOS."
          files: |
            artifacts/zirv-windows-latest.exe
            artifacts/zirv-ubuntu-latest.tar.gz
            artifacts/zirv-macos-latest.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Homebrew Formula
        if: success()
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
        run: |
          chmod +x ./scripts/update_homebrew.sh
          ./scripts/update_homebrew.sh v${{ steps.get_version.outputs.version }} artifacts/zirv-macos-latest.tar.gz

  update-chocolatey:
    name: Update Chocolatey Package
    runs-on: windows-latest
    needs: release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n 1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-windows-latest
          path: artifacts

      - name: Update Chocolatey Package
        shell: pwsh
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          choco config set --name='defaultPushSource' --value='https://push.chocolatey.org/'
          ./scripts/update_chocolatey.ps1 -Version ${{ steps.get_version.outputs.version }} -ArtifactPath artifacts\zirv-windows-latest.exe
        
        