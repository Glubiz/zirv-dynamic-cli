name: CD Pipeline

permissions:
  contents: write

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build:
    name: Build Binaries
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            suffix: linux
            ext: tar.gz
          - os: windows-latest
            suffix: windows
            ext: exe
          - os: macos-latest
            suffix: macos
            ext: tar.gz

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VER=$(grep '^version' Cargo.toml \
            | head -n1 \
            | sed -E 's/version *= *"([^"]+)".*/\1/')
          echo "version=$VER" >> $GITHUB_OUTPUT

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build release
        run: cargo build --release

      - name: Package artifact
        shell: bash
        run: |
          V=${{ steps.get_version.outputs.version }}
          SUF=${{ matrix.suffix }}
          EXT=${{ matrix.ext }}

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Rename the .exe
            mv target/release/zirv.exe zirv-${V}-windows.exe

          else
            # For macOS or Linux, produce a tarball containing 'zirv'
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              # Build universal for Intel & ARM
              rustup target add x86_64-apple-darwin
              rustup target add aarch64-apple-darwin
              cargo build --release --target x86_64-apple-darwin
              cargo build --release --target aarch64-apple-darwin
              lipo -create \
                target/x86_64-apple-darwin/release/zirv \
                target/aarch64-apple-darwin/release/zirv \
                -output zirv
            else
              # Linux
              cp target/release/zirv zirv
            fi

            chmod +x zirv
            tar -czvf zirv-${V}-${SUF}.tar.gz zirv
            rm zirv
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zirv-${{ matrix.suffix }}
          path: |
            ${{ matrix.os == 'windows-latest' && format('zirv-{0}-windows.exe', steps.get_version.outputs.version) || format('zirv-{0}-{1}.tar.gz', steps.get_version.outputs.version, matrix.suffix) }}

  release:
    name: Create GitHub Release & Upload Assets
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ needs.build.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch version
        run: echo "Version is ${{ needs.build.outputs.version }}"

      - name: Create Tag
        id: tag
        shell: bash
        run: |
          TAG="v${{ needs.build.outputs.version }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-windows
          path: artifacts

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-linux
          path: artifacts

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: zirv-macos
          path: artifacts

      - name: Create Release with Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          body: "Release of zirv v${{ needs.build.outputs.version }}"
          files: |
            artifacts/zirv-${{ needs.build.outputs.version }}-windows.exe
            artifacts/zirv-${{ needs.build.outputs.version }}-linux.tar.gz
            artifacts/zirv-${{ needs.build.outputs.version }}-macos.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: release
    environment:
      name: homebrew-release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update Homebrew Formula
        shell: bash
        env:
          HOMEBREW_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
        run: |
          chmod +x ./scripts/update_homebrew.sh
          ./scripts/update_homebrew.sh "${{ needs.build.outputs.version }}"

  update-chocolatey:
    name: Update Chocolatey Package
    runs-on: windows-latest
    needs: release
    environment:
      name: chocolatey-release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update Chocolatey
        shell: pwsh
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
        run: |
          ./scripts/update_chocolatey.ps1 `
            -Version ${{ needs.build.outputs.version }} `
            -ArtifactPath "artifacts\zirv-${{ needs.build.outputs.version }}-windows.exe"
